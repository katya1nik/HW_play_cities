## –ó–∞–¥–∞–Ω–∏–µ üë∑‚Äç‚ôÇÔ∏è

### –ö–ª–∞—Å—Å—ã –∏ –∏—Ö —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å
"""
1. **–ö–ª–∞—Å—Å `JsonFile`**
   - –û—Ç–≤–µ—á–∞–µ—Ç –∑–∞ —á—Ç–µ–Ω–∏–µ  –¥–∞–Ω–Ω—ã—Ö –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON.
   - –ú–µ—Ç–æ–¥—ã:
     - `read_data()`: –ß–∏—Ç–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ JSON-—Ñ–∞–π–ª–∞ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏—Ö.

2. **–ö–ª–∞—Å—Å `CitiesSerializer`**
   - –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –¥–∞—Ç–∞–∫–ª–∞—Å—Å `City` –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≥–æ—Ä–æ–¥–∞—Ö.
   - `__init__(self, city_data)`: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–ø–∏—Å–æ–∫ –≥–æ—Ä–æ–¥–æ–≤, —Å–æ–∑–¥–∞–≤–∞—è —ç–∫–∑–µ–º–ø–ª—è—Ä—ã `City`.
   - –ú–µ—Ç–æ–¥—ã:
     - `get_all_cities()`: –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –≥–æ—Ä–æ–¥–æ–≤.

3. **–ö–ª–∞—Å—Å `City`**
   - –î–∞—Ç–∞–∫–ª–∞—Å—Å –¥–ª—è –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è –≥–æ—Ä–æ–¥–∞.
   - –ü–æ–ª—è:
     - `name`: –ù–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞.
     - `population`: –ù–∞—Å–µ–ª–µ–Ω–∏–µ –≥–æ—Ä–æ–¥–∞.
     - `subject`: –°—É–±—ä–µ–∫—Ç —Ñ–µ–¥–µ—Ä–∞—Ü–∏–∏.
     - `district`: –†–∞–π–æ–Ω.
     - `latitude`: –®–∏—Ä–æ—Ç–∞.
     - `longitude`: –î–æ–ª–≥–æ—Ç–∞.
     - `is_used`: –§–ª–∞–≥, —É–∫–∞–∑—ã–≤–∞—é—â–∏–π, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –ª–∏ –≥–æ—Ä–æ–¥ –≤ –∏–≥—Ä–µ.

4. **–ö–ª–∞—Å—Å `CityGame`**
   - –£–ø—Ä–∞–≤–ª—è–µ—Ç –ª–æ–≥–∏–∫–æ–π –∏–≥—Ä—ã.
   - –ú–µ—Ç–æ–¥—ã:
     - `__init__(self, cities)`: –ü—Ä–∏–Ω–∏–º–∞–µ—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä `CitiesSerializer` –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã.
     - `start_game()`: –ù–∞—á–∏–Ω–∞–µ—Ç –∏–≥—Ä—É, –≤–∫–ª—é—á–∞—è –ø–µ—Ä–≤—ã–π —Ö–æ–¥ –∫–æ–º–ø—å—é—Ç–µ—Ä–∞.
     - `human_turn(city_input)`: –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ö–æ–¥ —á–µ–ª–æ–≤–µ–∫–∞.
     - `computer_turn()`: –í—ã–ø–æ–ª–Ω—è–µ—Ç —Ö–æ–¥ –∫–æ–º–ø—å—é—Ç–µ—Ä–∞.
     - `check_game_over()`: –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∏–≥—Ä—ã –∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –ø–æ–±–µ–¥–∏—Ç–µ–ª—è.
     - `save_game_state()`: –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã, –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ.

5. **–£–ø—Ä–∞–≤–ª—è—é—â–∏–π –∫–ª–∞—Å—Å `GameManager`**
   - –§–∞—Å–∞–¥, –∫–æ—Ç–æ—Ä—ã–π –∏–Ω–∫–∞–ø—Å—É–ª–∏—Ä—É–µ—Ç –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ –º–µ–∂–¥—É –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏.
   - –ê—Ç—Ä–∏–±—É—Ç—ã:
     - `json_file`: –≠–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∞—Å—Å–∞ `JsonFile`.
     - `cities_serializer`: –≠–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∞—Å—Å–∞ `CitiesSerializer`.
     - `city_game`: –≠–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∞—Å—Å–∞ `CityGame`.
   - –ú–µ—Ç–æ–¥—ã:
     - `__call__()`: –ó–∞–ø—É—Å–∫–∞–µ—Ç –∏–≥—Ä—É, –≤—ã–∑—ã–≤–∞—è –º–µ—Ç–æ–¥—ã `start_game()`, `human_turn()`, –∏ `computer_turn()` –¥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏–≥—Ä—ã.
     - `run_game()`: –ö–æ–æ—Ä–¥–∏–Ω–∏—Ä—É–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∏–≥—Ä—ã.
     - `display_game_result()`: –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏–≥—Ä—ã –ø–æ—Å–ª–µ –µ—ë –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ).


### –¢–∞–±–ª–∏—Ü–∞ (–≤–æ–∑–º–æ–∂–Ω—ã—Ö) –∫–ª–∞—Å—Å–æ–≤ –∏ –º–µ—Ç–æ–¥–æ–≤

| –ö–ª–∞—Å—Å               | –ú–µ—Ç–æ–¥—ã                          | –û–ø–∏—Å–∞–Ω–∏–µ                                                                                 |
|---------------------|---------------------------------|------------------------------------------------------------------------------------------|
| `JsonFile`          | `read_data()`                   | –ß–∏—Ç–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ JSON-—Ñ–∞–π–ª–∞ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏—Ö.                                             |
|                     | `write_data(data)`              | –ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ JSON-—Ñ–∞–π–ª.                                                           |
| `CitiesSerializer`  | `__init__(self, city_data)`     | –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–ø–∏—Å–æ–∫ –≥–æ—Ä–æ–¥–æ–≤, —Å–æ–∑–¥–∞–≤–∞—è —ç–∫–∑–µ–º–ø–ª—è—Ä—ã `City`.                               |
|                     | `get_all_cities()`              | –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –≥–æ—Ä–æ–¥–æ–≤.                                                          |
| `City`              | -                               | –î–∞—Ç–∞–∫–ª–∞—Å—Å –¥–ª—è –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è –≥–æ—Ä–æ–¥–∞ —Å –ø–æ–ª—è–º–∏: `name`, `population`, `subject`, `district`, `latitude`, `longitude`, `is_used`. |
| `CityGame`          | `__init__(self, cities)`        | –ü—Ä–∏–Ω–∏–º–∞–µ—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä `CitiesSerializer` –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã.                  |
|                     | `start_game()`                  | –ù–∞—á–∏–Ω–∞–µ—Ç –∏–≥—Ä—É, –≤–∫–ª—é—á–∞—è –ø–µ—Ä–≤—ã–π —Ö–æ–¥ –∫–æ–º–ø—å—é—Ç–µ—Ä–∞.                                            |
|                     | `human_turn(city_input)`        | –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ö–æ–¥ —á–µ–ª–æ–≤–µ–∫–∞.                                                               |
|                     | `computer_turn()`               | –í—ã–ø–æ–ª–Ω—è–µ—Ç —Ö–æ–¥ –∫–æ–º–ø—å—é—Ç–µ—Ä–∞.                                                                |
|                     | `check_game_over()`             | –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∏–≥—Ä—ã –∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –ø–æ–±–µ–¥–∏—Ç–µ–ª—è.                                       |
|                     | `save_game_state()`             | –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã, –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ.                                               |
| `GameManager`       | `__call__()`                    | –ó–∞–ø—É—Å–∫–∞–µ—Ç –∏–≥—Ä—É, –≤—ã–∑—ã–≤–∞—è –º–µ—Ç–æ–¥—ã `start_game()`, `human_turn()`, –∏ `computer_turn()` –¥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏–≥—Ä—ã. |
|                     | `run_game()`                    | –ö–æ–æ—Ä–¥–∏–Ω–∏—Ä—É–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∏–≥—Ä—ã.                                                            |
|                     | `display_game_result()` (–æ–ø—Ü.)  | –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏–≥—Ä—ã –ø–æ—Å–ª–µ –µ—ë –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ).                             |

###
"""

from dataclasses import dataclass
import json

class JsonFile:
    """
    –ö–ª–∞—Å—Å –¥–ª—è —á—Ç–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ JSON-—Ñ–∞–π–ª–∞ —Å –≥–æ—Ä–æ–¥–∞–º–∏ –†–æ—Å—Å–∏–∏
    """
    def __init__(self, file_path: str):
        self.file_path = file_path
    def read_data(self):
        with open(self.file_path, 'r', encoding='utf-8') as file:
            return json.load(file)

@dataclass
class City:
    """
    –ö–ª–∞—Å—Å –¥–ª—è –æ–ø–∏—Å–∞–Ω–∏—è –≥–æ—Ä–æ–¥–∞
    """
    name: str
    population: int
    subject: str
    district: str
    latitude: float
    longitude: float
    is_used: bool = False

class CitiesSerializer:
    """
    –ö–ª–∞—Å—Å –¥–ª—è —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∏ –¥–µ—Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–ø–∏—Å–∫–∞ –≥–æ—Ä–æ–¥–æ–≤
    """
    def __init__(self, city_data: list):
        self.cities = []
        for city in city_data:
            city_1 = City(
                name=city['name'],
                population=city.get('population', 0),
                subject=city.get('subject', ''),
                district=city.get('district', ''),
                latitude=city.get('latitude', 0.0),
                longitude=city.get('longitude', 0.0),
                is_used=False
            )
            self.cities.append(city_1)
    def get_all_cities(self):
        return self.cities
    
class CityGame:
    """
    –ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–≥—Ä–æ–π –≤ –≥–æ—Ä–æ–¥–∞
    """
    def __init__(self, cities: CitiesSerializer):
        self.cities = cities.get_all_cities()
        self.cities_set = set()
        for city in self.cities:
            self.cities_set.add(city.name.lower())
        self.computer_city = ''
        self.bad_letters = self._count_bad_letters()

    def _count_bad_letters(self):
        sym_lower_set = set('–∞–±–≤–≥–¥–µ—ë–∂–∑–∏–π–∫–ª–º–Ω–æ–ø—Ä—Å—Ç—É—Ñ—Ö—Ü—á—à—â—ä—ã—å—ç—é—è')
        bad_letters = set()

        for letter in sym_lower_set:
            letter_found = False
            for city_name in self.cities_set:
                if letter.lower() == city_name[0].lower():
                    letter_found = True
                    break
            if not letter_found:
                    bad_letters.add(letter)
        return bad_letters


    def human_move(self, city_input: str) -> bool:
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ö–æ–¥ —á–µ–ª–æ–≤–µ–∫–∞
        """
        if city_input.lower() not in self.cities_set:
            return False
        
        if self.computer_city and city_input[0].lower() != self.computer_city[-1].lower():
            return False
        
        self.cities_set.remove(city_input.lower())
        return True
    
    def computer_move(self, human_city: str) -> str:
        """
        –í—ã–ø–æ–ª–Ω—è–µ—Ç —Ö–æ–¥ –∫–æ–º–ø—å—é—Ç–µ—Ä–∞
        """
        for city in self.cities_set:
            if city[0].lower() == human_city[-1].lower():
                if city[-1].lower() in self.bad_letters:
                    continue
                self.computer_city = city
                self.cities_set.remove(city)
                return city
            
class GameManager:
    """
    –ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–≥—Ä–æ–π
    """
    def __init__(self, json_file_path: str):
        self.json_file = JsonFile(json_file_path)
        self.cities_serializer = CitiesSerializer(self.json_file.read_data())
        self.city_game = CityGame(self.cities_serializer)

    def start_game(self):
        """
        –ù–∞—á–∏–Ω–∞–µ—Ç –∏–≥—Ä—É, –≤–∫–ª—é—á–∞—è –ø–µ—Ä–≤—ã–π —Ö–æ–¥ –∫–æ–º–ø—å—é—Ç–µ—Ä–∞.
        """
        while True:
            human_city = input('–í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥ –†–æ—Å—Å–∏–∏: ').lower()

            if not self.city_game.human_move(human_city):
                print('–í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏.')
                break

            computer_move = self.city_game.computer_move(human_city)
            if not computer_move:
                print('–ö–æ–º–ø—å—é—Ç–µ—Ä –ø—Ä–æ–∏–≥—Ä–∞–ª.')
                break

            print(f'–ö–æ–º–ø—å—é—Ç–µ—Ä –Ω–∞–∑–≤–∞–ª –≥–æ—Ä–æ–¥: {computer_move}')

if __name__ == "__main__":
    game_manager = GameManager('cities.json')
    game_manager.start_game()